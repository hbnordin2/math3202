from gurobipy import *
import random

# Data and ranges
nHospitalSites = 30
nSuburbs = 55
MaxSuburbsPerHospital = 7
MaxPopulation = 500000

# Hospital names
H = range(nHospitalSites)
# Suburb names
S = range(nSuburbs)

random.seed(3)


FixedCost = [6996191, 9971432, 9565325, 6094065, 8103408, 8976649, 9872540, 5549695, 5110461, 8936206, 7175619, 9620316, 6965710, 6608466, 8944856, 9538017, 9610640, 8995940, 8331406, 6263462, 6945502, 6271900, 9388762, 8271026, 5127060, 5537134, 6337143, 9958502, 5358940, 7527216]
 
Population = [85561, 61016, 86986, 88361, 68828, 75491, 79488, 83554, 88796, 72701, 83400, 85824, 73989, 72942, 83859, 86244, 78904, 74569, 64395, 88798, 71977, 63193, 61175, 64455, 76216, 67110, 68453, 82021, 74292, 85525, 80534, 88024, 69864, 73800, 76621, 87311, 72644, 78809, 71498, 77501, 79171, 73355, 79144, 67614, 89628, 71035, 82347, 60939, 88062, 69164, 79851, 81996, 82792, 65344, 82892]
 
Dist = [[20, 34, 36, 36, 6, 45, 41, 13, 40, 36, 17, 18, 7, 4, 30, 40, 30, 5, 22, 4, 26, 9, 1, 18, 27, 49, 26, 7, 2, 38, 39, 48, 2, 24, 45, 37, 21, 35, 17, 32, 15, 2, 19, 0, 4, 6, 38, 34, 2, 12, 26, 18, 39, 16, 9], [44, 2, 21, 20, 23, 8, 24, 24, 29, 33, 24, 41, 38, 43, 35, 6, 39, 32, 17, 27, 40, 46, 45, 15, 19, 27, 16, 33, 19, 35, 21, 0, 50, 26, 37, 20, 1, 24, 39, 37, 40, 8, 3, 40, 40, 21, 29, 22, 43, 22, 38, 45, 17, 47, 31], [1, 37, 3, 43, 1, 23, 16, 40, 29, 19, 37, 38, 20, 11, 23, 11, 20, 48, 23, 38, 16, 19, 50, 24, 6, 49, 1, 36, 43, 47, 8, 19, 32, 14, 41, 17, 15, 20, 11, 43, 27, 41, 44, 6, 6, 38, 20, 21, 43, 14, 28, 10, 5, 21, 47], [41, 13, 36, 28, 17, 14, 50, 7, 2, 33, 12, 20, 36, 11, 17, 21, 41, 5, 39, 22, 37, 8, 26, 18, 33, 50, 17, 29, 22, 40, 26, 18, 26, 36, 26, 2, 26, 9, 12, 0, 30, 39, 32, 27, 35, 45, 14, 2, 47, 29, 48, 42, 47, 33, 18], [34, 21, 14, 4, 37, 18, 7, 15, 2, 2, 44, 32, 12, 27, 36, 3, 0, 30, 47, 7, 10, 32, 19, 15, 42, 1, 33, 34, 26, 3, 39, 7, 21, 8, 16, 34, 30, 50, 3, 22, 14, 12, 7, 34, 7, 10, 15, 50, 17, 8, 0, 31, 40, 36, 25], [3, 48, 17, 15, 17, 39, 33, 33, 27, 3, 30, 20, 49, 0, 3, 49, 8, 2, 7, 3, 4, 30, 2, 45, 5, 32, 32, 31, 20, 10, 20, 4, 22, 24, 41, 24, 37, 19, 23, 16, 12, 21, 27, 7, 8, 35, 0, 45, 46, 24, 50, 5, 36, 11, 2], [23, 29, 38, 41, 50, 34, 24, 40, 2, 39, 27, 3, 23, 40, 31, 48, 44, 20, 26, 44, 26, 29, 1, 15, 13, 34, 17, 44, 37, 4, 27, 14, 27, 8, 1, 20, 23, 35, 50, 16, 7, 29, 44, 7, 46, 42, 33, 50, 24, 42, 6, 46, 20, 36, 34], [6, 37, 45, 0, 30, 9, 15, 49, 24, 2, 33, 5, 36, 6, 42, 24, 11, 1, 21, 7, 1, 7, 43, 30, 44, 18, 37, 19, 5, 2, 49, 36, 32, 33, 45, 15, 6, 35, 47, 6, 35, 3, 35, 20, 36, 11, 4, 15, 11, 41, 15, 29, 39, 44, 48], [25, 16, 23, 38, 25, 22, 35, 26, 5, 24, 32, 15, 26, 47, 10, 26, 44, 36, 48, 37, 43, 33, 43, 30, 9, 41, 25, 9, 10, 6, 31, 47, 30, 44, 33, 28, 37, 46, 11, 8, 17, 48, 12, 9, 37, 32, 20, 14, 44, 34, 49, 18, 42, 45, 26], [38, 37, 37, 17, 13, 19, 1, 17, 30, 24, 12, 11, 36, 23, 15, 20, 30, 49, 9, 26, 44, 30, 44, 38, 13, 29, 37, 41, 35, 1, 30, 46, 4, 25, 50, 46, 2, 29, 14, 15, 41, 45, 49, 43, 4, 13, 16, 15, 12, 49, 16, 8, 11, 39, 45], [43, 2, 16, 10, 2, 20, 11, 27, 5, 46, 5, 7, 5, 16, 18, 2, 22, 28, 37, 46, 43, 21, 0, 1, 21, 21, 27, 24, 31, 4, 13, 41, 37, 47, 31, 25, 8, 34, 20, 7, 17, 4, 42, 27, 7, 28, 33, 16, 6, 33, 44, 23, 43, 49, 23], [48, 28, 18, 42, 43, 42, 41, 16, 6, 48, 21, 43, 36, 34, 33, 7, 42, 31, 32, 22, 3, 45, 18, 43, 46, 36, 47, 11, 41, 41, 46, 40, 9, 11, 23, 41, 29, 7, 6, 35, 9, 21, 41, 46, 41, 38, 26, 35, 19, 41, 11, 29, 30, 19, 50], [11, 45, 4, 6, 45, 11, 48, 35, 34, 36, 47, 25, 22, 6, 17, 17, 24, 3, 8, 2, 30, 32, 17, 15, 44, 49, 32, 22, 21, 25, 28, 34, 49, 4, 22, 31, 7, 9, 17, 37, 6, 43, 7, 36, 49, 46, 7, 11, 44, 12, 36, 26, 42, 47, 25], [47, 8, 37, 38, 9, 25, 12, 34, 33, 10, 36, 11, 12, 16, 23, 50, 18, 1, 28, 26, 24, 20, 35, 37, 19, 40, 31, 33, 43, 45, 19, 42, 30, 1, 38, 12, 46, 40, 0, 6, 49, 48, 42, 14, 31, 11, 33, 40, 29, 12, 12, 50, 33, 13, 2], [32, 41, 28, 7, 36, 18, 42, 9, 8, 29, 50, 5, 39, 3, 1, 23, 39, 14, 32, 4, 31, 34, 1, 21, 20, 21, 22, 44, 44, 8, 5, 38, 49, 2, 45, 5, 47, 21, 13, 4, 12, 27, 44, 48, 14, 31, 20, 6, 50, 2, 26, 4, 12, 45, 10], [25, 31, 30, 44, 4, 34, 27, 13, 41, 31, 19, 1, 29, 29, 48, 44, 25, 28, 11, 29, 2, 46, 16, 23, 23, 28, 33, 23, 38, 25, 14, 0, 13, 16, 50, 23, 9, 29, 34, 12, 10, 13, 1, 10, 37, 25, 32, 10, 40, 1, 8, 7, 38, 10, 28], [31, 11, 3, 1, 25, 28, 20, 26, 2, 45, 45, 3, 15, 25, 2, 25, 31, 1, 14, 15, 6, 24, 30, 12, 10, 21, 39, 7, 22, 7, 38, 3, 46, 18, 17, 50, 29, 50, 19, 31, 15, 35, 17, 1, 21, 40, 22, 20, 5, 3, 43, 27, 5, 37, 39], [0, 6, 1, 43, 5, 1, 10, 32, 2, 30, 3, 12, 41, 32, 21, 12, 48, 30, 21, 30, 22, 42, 2, 24, 19, 48, 38, 40, 25, 5, 18, 11, 26, 7, 32, 24, 35, 21, 34, 43, 49, 25, 11, 47, 46, 24, 35, 22, 11, 23, 26, 28, 14, 28, 49], [44, 30, 22, 17, 10, 32, 46, 48, 38, 45, 44, 24, 31, 2, 9, 10, 45, 48, 1, 29, 5, 48, 44, 43, 42, 6, 20, 15, 38, 41, 3, 39, 3, 28, 29, 46, 41, 21, 23, 0, 4, 12, 25, 50, 6, 21, 36, 19, 7, 28, 5, 41, 13, 15, 44], [3, 9, 41, 9, 37, 0, 7, 14, 18, 13, 14, 35, 32, 26, 32, 49, 38, 20, 50, 34, 50, 12, 29, 11, 39, 5, 2, 7, 38, 1, 6, 12, 16, 5, 6, 29, 25, 14, 43, 39, 6, 41, 31, 48, 42, 44, 22, 25, 38, 42, 28, 49, 7, 18, 38], [28, 24, 13, 7, 34, 0, 29, 19, 46, 41, 4, 21, 22, 12, 31, 48, 4, 35, 43, 47, 23, 27, 50, 41, 4, 38, 33, 13, 15, 22, 3, 21, 15, 27, 28, 5, 16, 13, 20, 10, 47, 13, 46, 13, 47, 39, 29, 45, 34, 26, 23, 12, 39, 26, 30], [49, 26, 30, 37, 2, 18, 1, 11, 6, 1, 46, 9, 18, 32, 33, 3, 40, 30, 2, 12, 47, 13, 17, 31, 27, 2, 22, 29, 47, 12, 47, 50, 18, 9, 6, 28, 19, 26, 28, 4, 13, 9, 31, 48, 44, 18, 24, 40, 23, 10, 27, 19, 29, 30, 33], [34, 14, 23, 18, 18, 1, 29, 23, 22, 19, 47, 15, 33, 0, 0, 8, 40, 33, 9, 34, 1, 10, 3, 0, 13, 49, 50, 29, 22, 50, 23, 35, 2, 31, 11, 15, 0, 17, 27, 21, 3, 38, 34, 6, 28, 19, 16, 15, 43, 31, 26, 46, 16, 21, 2], [1, 27, 2, 40, 43, 10, 48, 36, 15, 8, 47, 48, 50, 26, 32, 48, 21, 35, 8, 17, 1, 10, 2, 1, 31, 41, 3, 29, 29, 33, 42, 48, 38, 32, 26, 23, 33, 40, 10, 18, 11, 4, 43, 8, 35, 6, 26, 49, 22, 28, 29, 17, 16, 28, 18], [33, 9, 36, 20, 8, 33, 2, 26, 31, 14, 29, 37, 39, 17, 1, 20, 36, 38, 35, 7, 31, 8, 17, 50, 45, 48, 17, 6, 27, 42, 4, 23, 2, 32, 31, 48, 41, 28, 12, 19, 22, 11, 41, 24, 25, 20, 3, 17, 13, 2, 20, 20, 39, 25, 35], [18, 2, 8, 26, 16, 26, 5, 31, 14, 12, 47, 5, 44, 33, 7, 47, 40, 7, 40, 0, 18, 44, 4, 27, 17, 30, 29, 17, 18, 34, 35, 3, 11, 15, 31, 10, 9, 9, 45, 11, 44, 29, 43, 25, 41, 0, 9, 25, 3, 11, 48, 40, 11, 19, 12], [41, 8, 9, 3, 33, 9, 34, 13, 24, 49, 6, 27, 24, 11, 1, 17, 6, 8, 7, 9, 18, 8, 24, 22, 38, 4, 12, 0, 23, 9, 30, 15, 4, 22, 34, 31, 6, 45, 20, 30, 1, 47, 22, 33, 47, 50, 28, 36, 26, 29, 34, 34, 19, 28, 9], [34, 29, 24, 12, 48, 38, 18, 47, 47, 11, 19, 10, 20, 17, 12, 8, 3, 38, 3, 26, 39, 11, 7, 36, 0, 10, 7, 50, 25, 36, 43, 23, 33, 44, 49, 17, 5, 29, 34, 37, 28, 20, 9, 37, 38, 13, 20, 29, 32, 36, 23, 40, 20, 37, 22], [44, 38, 49, 46, 22, 44, 21, 18, 19, 17, 11, 7, 38, 32, 14, 46, 21, 46, 41, 15, 18, 27, 17, 28, 8, 30, 21, 34, 50, 11, 39, 33, 33, 28, 39, 3, 4, 26, 27, 35, 39, 49, 18, 3, 15, 24, 24, 13, 4, 23, 32, 13, 3, 35, 31], [7, 27, 46, 24, 45, 35, 23, 0, 19, 23, 32, 23, 25, 28, 23, 41, 43, 6, 37, 31, 9, 20, 14, 0, 23, 4, 39, 0, 8, 5, 13, 20, 27, 18, 12, 1, 1, 34, 46, 20, 34, 28, 47, 23, 46, 13, 28, 21, 43, 37, 7, 32, 24, 14, 30]]

# Set up model and set the gap on the answer to 0
m = Model()
m.setParam('MIPGap', 0)

def yIsOneIffx1StrictlyBiggerThanx2(y, x1, x2, M):
    m.addConstr(x1 >= x2 - M*(1-y) + 1)
    m.addConstr(x2 >= x1 - M*y)

def castToBoolean(y, x, U):
    m.addConstr(y <= x)
    m.addConstr(x <= U * y)

"""
Variables
"""
# 1 iff suburb is assigned to hospital
suburbToHospital = {}
for suburbName in S:
    for hospitalName in H:
        suburbToHospital[suburbName, hospitalName] = m.addVar(vtype=GRB.BINARY)

# 1 iff we are building the hospital
hospitals = {}
for hospitalName in H:
    hospitals[hospitalName] = m.addVar(vtype=GRB.BINARY)

"""
Constraints
"""

for h in H:
    totalPopulation = 0
    totalServing = 0
    for suburbName, hospitalName in suburbToHospital:
        if hospitalName == h:
            totalServing += suburbToHospital[suburbName, hospitalName]
            totalPopulation += suburbToHospital[suburbName, hospitalName] * Population[suburbName]
 
    # No hospital can serve more than 7 suburbs
    m.addConstr(totalPopulation <= 500000)
    # No hospital can serve more than 500,000 people
    m.addConstr(totalServing <= 7)

    # Hospitals is only 1 iff there's a suburb in it
    yIsOneIffx1StrictlyBiggerThanx2(hospitals[h], totalServing, 0, 1000)

# Make sure a suburb is only allocated to 1 hospital
for i in S:
    numberOfHospitalSuburbHasBeenAllocatedTo = 0
    for suburbName, hospitalName in suburbToHospital:
        if i == suburbName:
            numberOfHospitalSuburbHasBeenAllocatedTo += suburbToHospital[suburbName, hospitalName]
    m.addConstr(numberOfHospitalSuburbHasBeenAllocatedTo == 1)

"""
Objective function
"""
costOfBuilding = 0
for h in H:
    costOfBuilding += FixedCost[h] * hospitals[h]

costOfTransport = 0
for h in H:
    for s in S:
        costOfTransport += suburbToHospital[s, h] * Dist[h][s] * Population[s]

totalCost = costOfBuilding + costOfTransport

m.setObjective(totalCost, GRB.MINIMIZE)

m.optimize()

for i in hospitals:
    if hospitals[i].x == 1:
        print(i)

print(FixedCost)